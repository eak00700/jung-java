package day13;

import java.util.Random;
import java.util.Scanner;

public class test {
	public static void main(String[] args) {
		String[] arr = new String[29];
		arr[0] = "코드가 위에서 아래로 실행되는 구조는?";
		arr[1] = "주어진 조건만족 여부에 따라 처리대상과 순서를 전달하는것은?";
		arr[2] = "조건이 만족할 때까지 동작을 반복하는 구조는?";	
		arr[3] = "DFD란?";
		arr[4] = "자료의 단위,값을 정의하는 도구,DFD에 표현된 자료저장소를 구체적으로 명시하기위해 사용하는것은?";
		arr[5] = "나눌 수 없는 부분까지 기능을 분리하여 작성한 명세서는?";
		arr[6] = "데이터 흐름도에서 원으로 표시하는것은?";
		arr[7] = "데이터 흐름도에서 화살표로 표시하는것은?";
		arr[8] = "데이터 흐름도에서 두개의 직선이 평행선으로 나타나는 것은?";
		arr[9] = "데이터 흐름도에서 사각형으로 표시되며 DFD범위 밖에있고 액터(행위자)라고 불리는것은?";
		arr[10] ="객체의 속성,행위를 하나로 묶어 실제 구현 내용 일부를 은닉시키는것은?";
		arr[11] ="부모 클래스에 새로운 기능을 추가해 자식클래스를 만들어 사용하는기법은?";
		arr[12] ="어떤 실체로 부터 관심있는 특성들만 하나로 모은것은?";
		arr[13] ="같은 모양의 함수가 상황에 따라 다르게 동작하는 것을 의미함. 이것은?";
		arr[14] ="객체지향 설계원칙 5가지 중, 클래스는 각각 하나의 책임만 가진다는것은?";
		arr[15] ="기존의 코드를 변경하지 않고(Closed)\n기능을 추가할 수 있도록(Open) 설계가 되어야 한다는 원칙은?";
		arr[16] ="자식 클래스는 자신의 부모 클래스를 대체할 수 있다는 원칙.\n부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 잘 작동해야 한다는 원칙은?";
		arr[17] ="하나의 평범한 인터페이스보다 여러 개의 구체적인 인터페이스가 좋다. 이것은?";
		arr[18] ="변화가 없는 것에 의존해야 한다는 원칙이다.\n구체적인 클래스 보다 인터페이스나 추상 클래스와 관계를 맺어야 하는 원칙이다. 이것은?";
		arr[19] ="시퀀스 다이어그램에서 라이프라인(Life Line)을 가지는것은?";
		arr[20] ="시퀀스 다이어그램에서 자신의 객체 라이프라인으로부터 다른 객체 라이프라인까지 선 + 화살표로 표시하는것은?";
		arr[21] ="객체 라이프라인 위에 그려지는 박스.\n객체의 특정 메소드가 실행되고 있거나 다른 객체의 메소드가 종료되기를 기다린다는 것. 이것은?";
		arr[22] ="코드를 작성함과 동시에 인터프리터가 기계어로 번역하고 실행한다. 이것은?";
		arr[23] ="스크립트 프로그래밍 원리에서 가상 머신이 이해할 수 있는 ByteCode로 변환하는것은?";
		arr[24] ="스크립트 프로그래밍 원리에서 CPU가 이해할 수 있는 기계어로 변환하는것은?";
		arr[25] ="스크립트 프로그래밍 원리에서 컴퓨터의 CPU는 가상 머신이 만들어낸 기계어를 수행하는 것은?";
		arr[26] ="와이어프레임의 내용에 디스크립션 등을 포함한 설계 문서는 무엇인가?";
		arr[27] ="페이지 레이아웃이나 화면 이동, 구성요소에 대한 내용을 기술한 문서는?";
		arr[28] ="설계 단계에서 실제 화면과 같은 형태의 모형은?";
		
		String[] arr2 = new String[29];
		arr2[0] ="순차구조";
		arr2[1] ="선택구조";
		arr2[2] ="반복구조";
		arr2[3] ="데이터흐름도";
		arr2[4] ="자료사전";
		arr2[5] ="소단위명세";
		arr2[6] ="프로세스";
		arr2[7] ="데이터흐름";
		arr2[8] ="데이터저장소";
		arr2[9] ="외부엔티티";
		arr2[10] ="캡슐화";
		arr2[11] ="상속성";
		arr2[12] ="추상화";
		arr2[13] ="다형성";
		arr2[14] ="단일책임원칙";
		arr2[15] ="개방폐쇄원칙";
		arr2[16] ="리스코프치환원칙";
		arr2[17] ="인터페이스분리원칙";
		arr2[18] ="의존역전원칙";
		arr2[19] ="활성객체";
		arr2[20] ="메시지";
		arr2[21] ="활성박스";
		arr2[22] ="인터프리터 언어";
		arr2[23] ="ByteCode변환";
		arr2[24] ="기계어로변환";
		arr2[25] ="CPU코드실행";
		arr2[26] ="스토리보드";
		arr2[27] ="와이어프레임";
		arr2[28] ="목업";
		
		Random rd = new Random();
		Scanner sc = new Scanner(System.in);
		String a;
		int cnt = 0;
		int[] arr3 = new int[29];
		System.out.println("주의사항. 띄어쓰기가 들어갈 경우 오답처리와 함께 다음문제도 오답처리 됩니다.");
		for(int i=0; i<=arr.length-1; i++) {
			int r = (int)(Math.random()*29);
			boolean found = false;
			for(int j=0; j<=i-1; j++) {
				if(arr3[j]==r)
					found = true;
			}
			if(!found)
				arr3[i]=r;
			else {
				i--;
				continue;
			}
			int b = arr3[i];
			System.out.print((i+1)+"번. "+arr[b]+" ");
			a = sc.next();
			if(a.equals(arr2[b])){
				System.out.println("정답!");
				cnt++;
			}
			else{
				System.out.println("땡!ㅋ 이걸틀리네 ㅋ");
				System.out.println("정답 : "+arr2[b]);
			}
		}
		System.out.println(cnt+"개 맞추셨습니다.");
		
	}
}
